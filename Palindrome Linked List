/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode*reverse(ListNode*head)
    {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        ListNode*uh=reverse(head->next);
        head->next->next=head;
        head->next=NULL;
        return uh;
    }
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {
            return true;
        }
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        cout<<slow->val<<endl;
        ListNode*temp=reverse(slow);
        while(head!=NULL)
        {
            cout<<head->val;
            head=head->next;
        }
        return true;
    }
};
