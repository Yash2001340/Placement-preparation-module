/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
       ListNode*c1=l1;
    ListNode*c2=l2;
    ListNode*finalhead=NULL;
    ListNode*finaltail=nullptr;
    if(l1==NULL)
        return l2;
    if(l2==NULL)
        return l1;
    if(c1->val>c2->val)
    {
        finalhead=c2;
        c2=c2->next;
    }
    else {
        finalhead=c1;
        c1=c1->next;
    }
    finaltail=finalhead;
    while(c1 && c2)
    {
        if(c1->val>=c2->val)
        {
            ListNode*f=c2->next;
            finaltail->next=c2;
            finaltail=finaltail->next;
            c2=f;
        }
        else if(c1->val<c2->val)
        {
            ListNode*f=c1->next;
            finaltail->next=c1;
            finaltail=finaltail->next;
            c1=f;
        }
    }
    while(c1)
    {
        finaltail->next=c1;
        finaltail=finaltail->next;
        c1=c1->next;
    }
    while(c2)
    {
        finaltail->next=c2;
        finaltail=finaltail->next;
        c2=c2->next;
    }
    finaltail->next=NULL;
    return finalhead;
        
    }
};
